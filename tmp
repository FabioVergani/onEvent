var bind = Function.prototype.call.bind(Function.prototype.bind);

// Wrap your mind around that. Think about it.
// What does it do? We are flipping "call",
// returning a function that takes a function
// and a context and returning a fully bound function.

// Bringing back our original example.
var context = { foo: "bar" };
function returnFoo () {
  return this.foo;
}

// And using our new amazing "bind".
var amazing = bind(returnFoo, context);
amazing(); // => bar




function isUndefined(x){return typeof(x)==='undefined';}

var Listeners=[];
//
function onEvent(name,node,action,capture){

 var s=name, e=node, k=Boolean(capture), m=Listeners, f=m[action]=function(o){action(o,e);};
 function detach(v){e.removeEventListener(s,f,isUndefined(v)?k:v);m.splice(m.indexOf(f),1);return e;}

 detach(k).addEventListener(s,f,k);

}
//
function zz1(evt,par){console.log('ok1');console.dir(Listeners);alert(par,evt);}
function zz2(evt,par){console.log('ok2');console.dir(Listeners);alert(par,evt);}
onEvent('click',document,zz1);
onEvent('click',document,zz1);





x=Listeners[s]=function(o){f(o,e,detach)}

[e][f]
.bind(this,'bla')
f.bind(this)
f()
function isFunction(x){return x instanceof Function}
function a(o){f(e,rem,o);}


<!doctype html>
<html lang='en'>
<head>
  <meta charset='utf-8'>
  <title>-</title>
  <link rel='stylesheet' href=''>
  //theNode,theDetacher,theEventObject
 if(d.insertBefore(od.doctype.cloneNode(false),h)){
	if(d.replaceChild(hc,h)){
		w.resizeTo(ow.outerWidth,ow.outerHeight);
		 //<todo>here:samescroll
		w.focus();
	};
 };
<script>
document.log=console.log.bind(console);
//
function Listen(s,e,f){

 function x(o){f(e,---,o);}
 
 function detach(){e.removeEventListener(s,x);return e;}
 
 detach().addEventListener(s,a);
}
//
function onDom(e,f){Listen('DOMContentLoaded',e,f);}
//
function prependnode(e,x){return e.insertBefore(x,e.firstChild);}//theNodeParent,theNodeChild;return x

parentElement.insertBefore(newElement, referenceElement);

//
function clonepage(originalDocument){
 var d=originalDocument, w=d.defaultView,

 //w=ow.open(), d=od||w.document, h=d.documentElement;
};



//
function handleFragment(x){
 var e=x
 return e;
};

//
function makeSnapshot(theDocument,detach,theEventObject){
 detach('"ondomloaded/makePageSnapshot" listener..');
 var d=theDocument, h=d.documentElement, hc=handleFragment(d.createDocumentFragment().appendChild(h.cloneNode(true)));
 hc
 //

};
//-------------------------------------------------
onDom(document,makeSnapshot);


function prepend(x,e) {
	return this.insertBefore(frag.apply(this, arguments), this.firstChild);
}




 /*


 var log=d.log,
 var w2=w.open(), d2=w2.document, h2=d2.documentElement;
 if(d2.insertBefore(d.doctype.cloneNode(false),h2)){
	if(d2.replaceChild(hc,h2)){
		w2.resizeTo(w.outerWidth,w.outerHeight);
		 //<todo>here:samescroll
		w2.focus();
	};
 };
 */



//log('e isSameNode html?',e.isSameNode(html),'Reference\ne isEqualNode html?',e.isEqualNode(html),'Object');
/*
 console.dir(o.doctype);
 console.dir(d.doctype);
 console.dir(fragment);
*/
//console.log();
//var at=Function.prototype.bind.call();
//DOM fully loaded and parsed
//console.log();
</script>
document.doctype.parentNode.replaceChild(newDoctype,document.doctype);
</head>
<body>
zzz
</body>
</html>
